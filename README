# = Gentlemen, Start your Engines!
# 1. Install the Engines plugin into your plugins directory
# 2. Install your engine into the /vendor/engines directory (create it if it doesn't exist)
#    e.g. /vendor/engines/my_engine/<the engine files...>
# 3. Add configuration to environment.rb
#    e.g.
#       # Add your application configuration here
#       module MyEngine
#         config :TopSpeed, "TurboFast"
#       end
#    
#       Engine.start "my_engine"
# 4. Run your server!
#
#
#
# = Background
# Rails Engines are a way of dropping in whoel chunks of functionality into your
# existing application without affecting *any* of your existing code. The could also 
# be described as mini-applications, or vertical application slices - top-to-bottom
# units which provide full MVC coverage for a certain, specific application function.
#
# As an example, the Login Engine provides a full user login subsystem, including: 
# * controllers to manage user accounts; 
# * helpers for you to interact with account information from other 
#   parts of your application; 
# * the model objects and schemas to create the required tables; 
# * stylesheets and javascript files to enhance the views; 
# * and any other library files required.
#
# Once the Rails Core team decides on a suitable method for packaging plugins, Engines
# can be distributed using the same mechanisms. If you are developing engines yourself
# for use across multiple projects, linking them as svn externals allows seamless updating
# of bugfixes across multiple applications.
#
#
#
# = Building an Engine
# In your Rails application, you should have a directory called 'engines' in the vendor
# directory (alongside plugins). This directory will contain one subdirectory for
# each engine. Here's a sample rails application with a detailed listing of an example 
# engines as a concrete example:
#
#   RAILS_ROOT
#     |- app
#     |- lib
#     |- config
#     |- <... other directories ...>
#     |- vendor
#         |-engines 
#             |- my_engine
#                   |- init.rb
#                   |- app
#                   |     |- controllers
#                   |     |- model
#                   |     |- helpers
#                   |     |- views
#                   |- db
#                   |- doc
#                   |- lib
#                   |- public
#                   |     |- javascripts
#                   |     |- stylesheets
#                   |- script
#
#
# The internal structure of an engine mirrors the familiar core of a Rails application,
# with most of the engine within the <tt>app</tt> subdirectory. Within <tt>app</tt>, the controllers,
# views and model objects behave just as you might expect if there in teh top-level <tt>app</tt>
# directory.
#
# When you call <tt>Engines.start "my_engine"</tt> in <tt>environment.rb</tt> a few important 
# bits of black magic voodoo happen:
# * the engine's controllers, views and modesl are mixed in to your running Rails application; 
# * files in the <tt>lib</tt> directory of your engine are made available to the rest of your system
# * any directory structure in the folder <tt>public</tt> within your engine is made servable
#   by the webserver
# * the file <tt>init.rb</tt> is loaded from within the engine (just like a plugin).
#
# From within <tt>init.rb</tt> you should load any libraries from your <tt>lib</tt> directory
# that your engine might need to function. You can also perform any configuration required.
#
#
# = Tweaking Engines
# One of the best things about Engines is that if you don't like the default behaviour of any
# component, you can override it without needing to overhaul the whole engine. This makes adding
# your customisations to engines almost painless, and allows for upgrading/updating engine code
# without affecting the specialisations you need for your particular application.
#
#
# == View Tweaks
# These are the simplest - just drop your customised view (or partial) into you <tt>/app/views</tt>
# directory in the corresponding location for the engine, and your view will be used in
# preference to the engine view. For example, if we have a ItemController with an action 'show',
# it will (normally) expect to find its view as <tt>report/show.rhtml</tt> in the <tt>views</tt>
# directory. The view is found in the engine at 
# <tt>/vendor/engines/my_engine/app/views/report/show.rhtml</tt>.
# However, if you create the file <tt>/app/views/report/show.rhtml</tt>, that file will be used
# instead! The same goes for partials.
#
#
# == Controller Tweaks
# You can override controller behaviour by replacing individual controller methods
# with your custom behaviour. Lets say that our ItemController's 'show' method isn't up to
# scratch, but the rest of it behaves just fine. To override the single method, create
# <tt>/app/controllers/item_controller.rb</tt>, just as if it were going to be a new
# controller in a regular Rails application. then, implement your show method as you would
# like it to happen.
#
# ... and that's it. Your custom code will be mixed in to the engine controller, replacing
# its old method with your custom code.
#
#
# == Model Tweaks
# Alas, tweaking model objects isn't quite so easy (yet). If you need to change the behaviour
# of model objects, you'll need to copy the model file from the engine into <tt>/app/models</tt>
# and edit the methods yourself. We're working on improving this.
#
#
#
# = TODO / Future Work
# * add rake tasks to generate databases based on engine schema.rb files
# * some kind of testing? Integrate with http://techno-weenie.net/svn/projects/test/
#